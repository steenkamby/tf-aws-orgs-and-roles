$ gpg --gen-key
gpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

gpg: directory '/Users/steenkamby/.gnupg' created
gpg: keybox '/Users/steenkamby/.gnupg/pubring.kbx' created
Note: Use "gpg --full-generate-key" for a full featured key generation dialog.

GnuPG needs to construct a user ID to identify your key.

Real name: Example AWS User
Email address: exampleuser@example.com
You selected this USER-ID:
    "Example AWS User <exampleuser@example.com>"

Change (N)ame, (E)mail, or (O)kay/(Q)uit? o
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: /Users/steenkamby/.gnupg/trustdb.gpg: trustdb created
gpg: key D2096D0FCF7EFFEF marked as ultimately trusted
gpg: directory '/Users/steenkamby/.gnupg/openpgp-revocs.d' created
gpg: revocation certificate stored as '/Users/steenkamby/.gnupg/openpgp-revocs.d/6B95D23F88160FE8BEE5EEC4D2096D0FCF7EFFEF.rev'
public and secret key created and signed.

pub   rsa2048 2020-07-02 [SC] [expires: 2022-07-02]
      6B95D23F88160FE8BEE5EEC4D2096D0FCF7EFFEF
uid                      Example AWS User <exampleuser@example.com>
sub   rsa2048 2020-07-02 [E] [expires: 2022-07-02]

$ gpg --export 6B95D23F88160FE8BEE5EEC4D2096D0FCF7EFFEF | base64 > exampleuser.asc
